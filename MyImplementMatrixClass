import math
from math import sqrt
import numbers

def zeroes(height, width):
        """
        Creates a matrix of zeroes.
        """
        g = [[0.0 for _ in range(width)] for __ in range(height)]
        return Matrix(g)

def identity(n):
        """
        Creates a n x n identity matrix.
        """
        I = zeroes(n, n)
        for i in range(n):
            I.g[i][i] = 1.0
        return I

class Matrix(object):

    # Constructor
    def __init__(self, grid):
        self.g = grid
        self.h = len(grid)
        self.w = len(grid[0])

    #
    # Primary matrix math methods
    #############################
 
    def determinant(self):
        """
        Calculates the determinant of a 1x1 or 2x2 matrix.
        """
        if not self.is_square():
            raise(ValueError, "Cannot calculate determinant of non-square matrix.")
        if self.h > 2:
            raise(NotImplementedError, "Calculating determinant not implemented for matrices largerer than 2x2.")
        
        # TODO - your code here
        if self.h == 1:
            mdet = self.g[0][0]
        elif self.h == 2:
            mdet = self.g[0][0] * self.g[1][1] + self.g[0][1] * self.g[1][0]
        
        return mdet

    
    
    def trace(self):
        """
        Calculates the trace of a matrix (sum of diagonal entries).
        """
        if not self.is_square():
            raise(ValueError, "Cannot calculate the trace of a non-square matrix.")

        # TODO - your code here
        mtrace = 0
        for r in range(self.h):
            for c in range(self.w):
                if r == c:
                    mtrace += self.g[r][c]        
        return mtrace
    
    

    def inverse(self):
        """
        Calculates the inverse of a 1x1 or 2x2 Matrix.
        """
        if not self.is_square():
            raise(ValueError, "Non-square Matrix does not have an inverse.")
        if self.h > 2:
            raise(NotImplementedError, "inversion not implemented for matrices larger than 2x2.")

        # TODO - your code here
        
        if self.h == 1:
            minverse =  self
            minverse[0][0] = 1 / minverse[0][0]
            
        elif self.h == 2:
            if self.g[0][0] * self.g[1][1] == self.g[0][1] * self.g[1][0]:
                raise(NotImplementedError, "matrix is not invertible")
            else:
                
                #minverse = zeroes(2,2)
                
                midentity = Matrix([
                            [1, 0],
                            [0, 1]
                            ])
                #minverse = (1/self.determinant) * (self.trace * midentity - self) #uses __rmul__ & __sub__
        
                sdet = Matrix.determinant(self)
            
                strace = Matrix.trace(self)
            
                mtrace = Matrix.__rmul__(midentity, strace)
                
                msub = Matrix.__sub__(mtrace, self)
                
                minverse = Matrix.__rmul__(msub, 1/sdet)
        
        return minverse
        
  


    def T(self):
        """
        Returns a transposed copy of this Matrix.
        """
        # TODO - your code here
        mtranspose = []
        
        for c in range(self.w):
            new_row = []
            for r in range(self.h):
                new_row.append(self.g[r][c])
            mtranspose.append(new_row)
                       
        return Matrix(mtranspose)
      
                       

    def is_square(self):
        return self.h == self.w

    #
    # Begin Operator Overloading
    ############################
    def __getitem__(self,idx):
        """
        Defines the behavior of using square brackets [] on instances
        of this class.

        Example:

        > my_matrix = Matrix([ [1, 2], [3, 4] ])
        > my_matrix[0]
          [1, 2]

        > my_matrix[0][0]
          1
        """
        return self.g[idx]

    def __repr__(self):
        """
        Defines the behavior of calling print on an instance of this class.
        """
        s = ""
        for row in self.g:
            s += " ".join(["{} ".format(x) for x in row])
            s += "\n"
        return s

    def __add__(self,other):
        """
        Defines the behavior of the + operator
        """
        if self.h != other.h or self.w != other.w:
            raise(ValueError, "Matrices can only be added if the dimensions are the same") 
        #   
        # TODO - your code here
        #
        msum = []
        for r in range(self.h):
            row = []
            for c in range(self.w):
                row.append(self.g[r][c] + other.g[r][c])
            msum.append(row)

        return Matrix(msum)
            
                       
                       

    def __neg__(self):
        """
        Defines the behavior of - operator (NOT subtraction)

        Example:

        > my_matrix = Matrix([ [1, 2], [3, 4] ])
        > negative  = -my_matrix
        > print(negative)
          -1.0  -2.0
          -3.0  -4.0
        """
        #   
        # TODO - your code here
        #
        mneg = -1 * self    #uses __rmul__
                       
        return mneg

                       

    def __sub__(self, other):
        """
        Defines the behavior of - operator (as subtraction)
        """
        #   
        # TODO - your code here
        #
        msub = []
        for r in range(self.h):
            row = []
            for c in range(self.w):
                row.append(self.g[r][c] - other.g[r][c])
            msub.append(row)

        return Matrix(msub)
                       
                       
                       
                       
    def __mul__(self, other):
        """
        Defines the behavior of * operator (matrix multiplication)
        """
        #   
        # TODO - your code here
        #
        
        mmul = []
        
        for r in range(self.h):
            row_result = []
            row_self = self.g[r][:]
            for c in range(other.w):
                col_other = other.g[:][c]
                dot_product = 0
                for i in range(len(row_self)):
                    dot_product += row_self[i] * col_other[i]
                row_result.append(dot_product)
            mmul.append(row_result)   
                    
        return Matrix(mmul)           

    def __rmul__(self, other):
        """
        Called when the thing on the left of the * is not a matrix.

        Example:

        > identity = Matrix([ [1,0], [0,1] ])
        > doubled  = 2 * identity
        > print(doubled)
          2.0  0.0
          0.0  2.0
        """
        if isinstance(other, numbers.Number):
            pass
            #   
            # TODO - your code here
            #
            
            mrmul = []
            for r in range(self.h):
                row = []
                for c in range(self.w):
                    row.append(other * self.g[r][c])
                mrmul.append(row)

        return Matrix(mrmul)
            
            
            
            
